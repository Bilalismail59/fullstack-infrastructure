name: Deploy to Google Cloud Platform

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  GCP_PROJECT_ID: primordial-port-462408-q7
  GCP_REGION: europe-west1
  GCP_ZONE: europe-west1-b
  TERRAFORM_VERSION: 1.5.0

jobs:
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check if frontend exists
        id: check_frontend
        run: |
          if [ -d "frontend" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Frontend directory does not exist, skipping npm steps"
          fi

      - name: Cache node_modules
        if: steps.check_frontend.outputs.exists == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies with retry
        if: steps.check_frontend.outputs.exists == 'true'
        run: |
          cd frontend
          for i in 1 2 3 4 5; do
            echo "Attempt $i"
            npm cache clean --force
            npm ci && break
            echo "Retrying in 15 seconds..."
            sleep 15
          done   

      - name: Run tests with coverage
        if: steps.check_frontend.outputs.exists == 'true'
        run: |
          cd frontend
          npx vitest run --coverage

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: sonarqube-analysis
    strategy:
      matrix:
        environment: [preprod, prod]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI 
        uses: google-github-actions/setup-gcloud@v1
        with: 
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create service account key file
        run: |
          cd terraform
          echo '${{ secrets.GCP_SA_KEY }}' > service-account-key.json

      - name: Verify GCS bucket exists
        run: |
          BUCKET="${{ secrets.TERRAFORM_STATE_BUCKET }}"
          if ! gsutil ls -b gs://$BUCKET >/dev/null 2>&1; then
            echo "Creating Terraform state bucket: $BUCKET"
            gsutil mb -p ${{ env.GCP_PROJECT_ID }} -l ${{ env.GCP_REGION }} gs://$BUCKET
            gsutil versioning set on gs://$BUCKET
          else
            echo "Terraform state bucket exists: $BUCKET"
          fi

      - name: Clean previous Terraform files
        run: |
          cd terraform
          rm -f backend.tf
          rm -rf .terraform .terraform.lock.hcl  

      - name: Configure Terraform Backend
        run: |
          cd terraform
          cat > backend.tf << EOF
          terraform {
            backend "gcs" {
              bucket = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
              prefix = "terraform-state/${{ matrix.environment }}"
              credentials = "service-account-key.json"
            }
          }
          EOF
          echo "Backend configuration:"
          cat backend.tf

      - name:  Debug all Terraform files
        run: |
          echo " Listing and displaying all Terraform files:"
          find terraform -name '*.tf' -exec echo "--- {} ---" \; -exec cat {} \;

      - name: Terraform Init with clean state
        run: |
          cd terraform
          terraform init \
            -reconfigure \
            -upgrade \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="prefix=terraform-state/${{ matrix.environment }}" \
            -backend-config="credentials=service-account-key.json"

      - name: Validate Terraform configuration
        run: |
          cd terraform
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="environment=${{ matrix.environment }}" \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_REGION }}" \
            -var="zone=${{ env.GCP_ZONE }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="domain_name=${{ secrets.DOMAIN_NAME }}" \
            -input=false \
            -out=tfplan-${{ matrix.environment }}.tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: terraform/tfplan-${{ matrix.environment }}.tfplan

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        environment: [preprod, prod]
    environment: ${{ matrix.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: 'access_token'

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:  
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ matrix.environment }}
          path: terraform/

      - name: Clean Terraform environment
        run: |
          cd terraform
          rm -rf .terraform* || true
          rm -f backend.tf

      - name: Configure Terraform Backend
        run: |
          cd terraform
          cat > backend.tf <<EOF
          terraform {
            backend "gcs" {
              bucket      = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
              prefix      = "terraform-state/${{ matrix.environment }}"
              credentials = "service-account-key.json"
            }
          }
          EOF
          echo "Backend configuration:"
          cat backend.tf

      - name: Create service account key file
        run: |
          cd terraform
          echo '${{ secrets.GCP_SA_KEY }}' > service-account-key.json
          chmod 600 service-account-key.json

      - name: Import all existing resources
        run: |
          cd terraform
          set +e
          declare -A resources=(
          ["google_compute_subnetwork.web"]="projects/${{ env.GCP_PROJECT_ID }}/regions/${{ env.GCP_REGION }}/subnetworks/fullstack-app-web-subnet"
          ["google_compute_subnetwork.db"]="projects/${{ env.GCP_PROJECT_ID }}/regions/${{ env.GCP_REGION }}/subnetworks/fullstack-app-db-subnet"
          ["google_compute_firewall.allow_http"]="projects/${{ env.GCP_PROJECT_ID }}/global/firewalls/fullstack-app-allow-http"
          ["google_compute_firewall.allow_ssh"]="projects/${{ env.GCP_PROJECT_ID }}/global/firewalls/fullstack-app-allow-ssh"
          ["google_compute_firewall.allow_internal"]="projects/${{ env.GCP_PROJECT_ID }}/global/firewalls/fullstack-app-allow-internal"
          ["google_compute_firewall.allow_monitoring"]="projects/${{ env.GCP_PROJECT_ID }}/global/firewalls/fullstack-app-allow-monitoring"
          ["google_compute_managed_ssl_certificate.default[0]"]="projects/${{ env.GCP_PROJECT_ID }}/global/sslCertificates/fullstack-app-ssl-cert"
          ["google_compute_global_address.private_ip_address"]="projects/${{ env.GCP_PROJECT_ID }}/global/addresses/fullstack-app-private-ip"
          ["google_compute_network.main"]="projects/${{ env.GCP_PROJECT_ID }}/global/networks/fullstack-app-vpc"
          ["google_compute_health_check.frontend"]="projects/${{ env.GCP_PROJECT_ID }}/global/healthChecks/fullstack-app-frontend-hc"
          ["google_compute_health_check.backend"]="projects/${{ env.GCP_PROJECT_ID }}/global/healthChecks/fullstack-app-backend-hc"
          ["google_compute_global_address.default"]="projects/${{ env.GCP_PROJECT_ID }}/global/addresses/fullstack-app-lb-ip"
          ["google_service_account.compute"]="projects/${{ env.GCP_PROJECT_ID }}/serviceAccounts/fullstack-app-compute-sa@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          )  
          
          for resource in "${!resources[@]}"; do
            echo "Importing $resource..."
            # 3 tentatives pour chaque import
            for i in {1..3}; do
              terraform import "$resource" "${resources[$resource]}" && break || sleep 5
            done || echo "Ã‰chec import pour $resource"  
          done  
          set -e   

      - name: Terraform Init with state validation
        run: |
          cd terraform
          terraform init \
            -reconfigure \
            -upgrade \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="prefix=terraform-state/${{ matrix.environment }}" \
            -backend-config="credentials=service-account-key.json"

          # Validate state integrity
          terraform state list >/dev/null || {
            echo "State validation failed, attempting recovery..."
            terraform init -reconfigure -force-copy
          }

      - name: Terraform Plan verification
        run: |
          cd terraform
          terraform plan -detailed-exitcode || \
          (echo "Plan shows changes after imports - applying anyway" && true)

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply \
            -auto-approve \
            -input=false \
            -lock=true \
            -lock-timeout=5m \
            tfplan-${{ matrix.environment }}.tfplan

      - name: Verify applied resources
        run: |
          cd terraform
          terraform output -json > outputs.json
          echo "Current state resources:"
          terraform state list

  build-and-deploy:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        environment: [preprod, prod]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:    
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Frontend Docker Image
        run: |
          cd frontend
          docker build -t gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:${{ github.sha }} .
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:${{ github.sha }}

      - name: Deploy to GKE (Production only)
        if: matrix.environment == 'prod'
        run: |
          gcloud container clusters get-credentials fullstack-app-gke-cluster --region=${{ env.GCP_REGION }}
          kubectl set image deployment/frontend-deployment frontend=gcr.io/${{ env.GCP_PROJECT_ID }}/frontend:${{ github.sha }}
          kubectl rollout status deployment/frontend-deployment
          kubectl rollout status deployment/backend-deployment

      - name: Update Compute Engine instances
        if: matrix.environment == 'preprod'
        run: |
          INSTANCE_GROUP=$(gcloud compute instance-groups managed list --filter="name~fullstack-app-frontend" --format="value(name)" --limit=1)
          gcloud compute instance-groups managed rolling-action start-update $INSTANCE_GROUP \
            --version=template=fullstack-app-frontend-$(date +%s) \
            --zone=${{ env.GCP_ZONE }}

  monitoring-setup:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:    
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Create Monitoring Dashboards
        run: |
          gcloud monitoring dashboards create --config-from-file=monitoring/gcp-dashboard.json

      - name: Setup Alerting Policies
        run: |
          gcloud alpha monitoring policies create --policy-from-file=monitoring/alert-policies.yaml

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [monitoring-setup]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Deployment to GCP completed!
            Environment: production
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
        env:
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 

      - name: Log deployment status
        run: |
          echo "Deployment completed with status: ${{ job.status }}"
          echo "Slack notification sent if webhook was configured."
